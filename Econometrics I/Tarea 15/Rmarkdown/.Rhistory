alpha <- 0.01
t_q <- qt(p = 1-alpha/2, df = n-k)
X <- cbind(1, X_j)
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Y
X <- as.matrix(X)
var.u_mco <- 1/(n-k)*t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
sd.u_mco <- sqrt(var.u_mco)
c <- c(0, 1, -3)
XX_inv <- solve(t(X)%*%X)
c.XX_inv.c <- t(c)%*%XX_inv%*%c
ci_cb <- c(
t(c)%*%b_mco - t_q*sd.u_mco*sqrt(c.XX_inv.c),
t(c)%*%b_mco + t_q*sd.u_mco*sqrt(c.XX_inv.c)
)
ci_cb
intervalos_cb <- data.frame(t(ci_cb))
set.seed(2)
for (i in 1:999) {
#generamos U
U <- rnorm(n = n, mean = 0, sd = sqrt(0.04))
#generamos X
X_j <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma))
names(X_j) <- c("X_1j", "X_2j")
X <- as.matrix(cbind(1, X_j))
#generamos Y
Y <- beta_0 + beta_1*X_j$X_1j + beta_2*X_j$X_2j + U
#calculamos las piezas del rompecabezas
## b_mco
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Y
## var.u_mco
UMU <- t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
var.u_mco <- 1/(n-k)*UMU
sd.u_mco <- sqrt(var.u_mco)
## c'.XX_inv.c
c <- c(0, 1, -3)
XX_inv <- solve(t(X)%*%X)
c.XX_inv.c <- t(c)%*%XX_inv%*%c
#generamos el intervalo de confianza para sigma
intervalos_cb <- rbind(intervalos_cb,
c(t(c)%*%b_mco - t_q*sd.u_mco*sqrt(c.XX_inv.c),
t(c)%*%b_mco + t_q*sd.u_mco*sqrt(c.XX_inv.c))
)
}
porcentaje_cb <- mean(intervalos_cb[1] < (-6.6) & (-6.6) < intervalos_cb[2])
porcentaje_cb
set.seed(1)
rm(list = ls())
n <- 100
mu <- c(0, 0.5)
Sigma <- matrix(c(0.36, 0.000002,
0.000002, 0.000001),
nrow = 2,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y_i", "X_i")
#Calculamos alpha_0
alpha_0 <- mu[1] - (Sigma[1,2]*mu[2])/Sigma[2,2]
#Calculemos beta_0
beta_0 <- Sigma[1,2]/Sigma[2,2]
#Armamos vector b
b <- t(cbind(alpha_0, beta_0))
b
var_u <- Sigma[1,1] - (Sigma[1,2]^2)/Sigma[2,2]
var_u
library(ggplot2)
library(hrbrthemes)
ggplot(Z, aes(x=X_i, y=Y_i)) +
geom_point(color="black",
fill="#69b3a2",
shape=22,
alpha=0.65,
size=2) +
geom_function(fun = function(x) b[1] + b[2]*x) +
theme_ipsum()
X <- cbind(1, Z$X_i)
XX <- t(X)%*%as.matrix(X)
XX
det(XX)
head(X)
tail(X)
solve(XX)
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%as.matrix(Z$Y_i)
b_mco
k <- 1
U <- Z$Y_i - X%*%b
var.u_mco <- 1/(n-k)*t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%(U)
var.u_mco
var_cond_b <- var_u*solve(XX)
var_cond_alpha <- var_cond_b[1,1]
var_cond_beta <- var_cond_b[2,2]
var_cond_b
var_cond_u <- 2/(n-k)*var_u^2
alpha <- 0.05
t_q <- qt(p = 1-alpha/2, df = n-k)
sd.u_mco <- sqrt(var.u_mco)
XX_inv <- solve(t(X)%*%X)
sqrt(XX_inv[1,1])
ci_alpha <- c(b_mco[1] - t_q*sd.u_mco*sqrt(XX_inv[1,1]),
b_mco[1] + t_q*sd.u_mco*sqrt(XX_inv[1,1]))
ci_alpha
ci_beta <- c(b_mco[2] - t_q*sd.u_mco*sqrt(XX_inv[2,2]),
b_mco[2] + t_q*sd.u_mco*sqrt(XX_inv[2,2]))
ci_beta
estimados <- data.frame(
alphaMCO = b_mco[1],
beta_MCO = b_mco[2],
sigma_u_MCO = var.u_mco
)
for (i in 2:5) {
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y_i", "X_i")
#matriz X_{nxk}
X <- cbind(1, Z$X_i)
#vector U dim n
U <- Z$Y_i - X%*%b
I_n <- diag(1, nrow = n)
#estimadores de MCO
b.mco_4times <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%as.matrix(Z$Y_i)
var.u.mco_4times <- 1/(n-k)*t(U)%*%(I_n - X%*%solve(t(X)%*%X)%*%t(X))%*%(U)
estimados <- rbind(estimados,
c(b.mco_4times,
var.u.mco_4times)
)
}
library(knitr)
kable(estimados,
col.names = c("$\\{\\hat{\\alpha}_i\\}_{i=1}^5$",
"$\\{\\hat{\\beta}_i\\}_{i=1}^5$",
"$\\{\\hat{\\sigma}_{ui}^2\\}_{i=1}^5$")
)
kable(data.frame(t(b), var_u),
col.names = c("$\\alpha_0$",
"$\\beta_0$",
"$\\sigma_u^2$")
)
set.seed(1)
rm(list = ls())
n <- 100
mu <- c(1, 0, 2)
Sigma <- matrix(c(0.8, 0.4, -0.2,
0.4, 1, -0.8,
-0.2, -0.8, 2),
nrow = 3,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y", "X_1", "X_2")
alpha <- 0.01
k <- 3
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
X <- cbind(1, Z[,-1])
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Z$Y
b_1_mco <- b_mco[2]
X <- as.matrix(X)
U_mco <- Z$Y - as.matrix(X)%*%as.matrix(b_mco)
var.u_mco <- 1/(n-k)*t(U_mco)%*%%*%U_mco
X <- as.matrix(X)
U_mco <- Z$Y - as.matrix(X)%*%as.matrix(b_mco)
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
sd.u_mco <- sqrt(var.u_mco)
sd.u_mco
var.u_mco
sqrt(XX)
sqrt(XX_inv)[2,2]
sqrt(0.016155)
.2146085^2
var.u_mco
c
c <- 1
c
c(1,0,1)
matrix(c(1,0,1))
b_mco
c
b_mco
c <- matrix(c(1,0,1))
alpha <- 0.1
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
c
dim(c)
dim(b_mco)
t(c)%*%b_mco
XX_inv
knitr::opts_chunk$set(echo = T)
rm(list = ls())
library(stargazer)
set.seed(1)
n <- 40
U <- rnorm(n = n, mean = 0, sd = sqrt(0.04))
library(mvtnorm)
mu <- c(0, 0)
Sigma <- matrix(c(0.01, -0.02,
-0.02, 0.09),
nrow = 2,
byrow = T)
X_j <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(X_j) <- c("X_1j", "X_2j")
beta_0 <- 1.1
beta_1 <- -2.4
beta_2 <- 1.4
Y <- beta_0 + beta_1*X_j$X_1j + beta_2*X_j$X_2j + U
k <- 3
alpha <- 0.1
t_q <- qt(p = 1-alpha/2, df = n-k)
X <- cbind(1, X_j)
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Y
beta2_mco <- b_mco[3]
X <- as.matrix(X)
var.u_mco <- 1/(n-k)*t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
sd.u_mco <- sqrt(var.u_mco)
XX_inv <- solve(t(X)%*%X)
sqrt(XX_inv[3,3])
ci_beta2 <- c(beta2_mco - t_q*sd.u_mco*sqrt(XX_inv[3,3]),
beta2_mco + t_q*sd.u_mco*sqrt(XX_inv[3,3]))
ci_beta2
# 2.5% de la probabilidad
alpha1 <- 0.025
q1 <- qchisq(p = 1-alpha1, df = n-k, lower.tail = F)
# 2.5% de la probabilidad
alpha2 <- .05 - alpha1
q2 <- qchisq(p = 1-alpha2, df = n-k)
c(q1, q2)
ci_sigma <- c((t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U)/q2,
(t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U)/q1
)
ci_sigma
intervalos_beta2 <- data.frame(t(ci_beta2))
intervalos_sigma <- data.frame(t(ci_sigma))
for (i in 1:999) {
#generamos U
U <- rnorm(n = n, mean = 0, sd = sqrt(0.04))
#generamos X
X_j <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma))
names(X_j) <- c("X_1j", "X_2j")
X <- as.matrix(cbind(1, X_j))
#generamos Y
Y <- beta_0 + beta_1*X_j$X_1j + beta_2*X_j$X_2j + U
#calculamos las piezas del rompecabezas
## b_mco
b_mco <- solve(t(X)%*%X)%*%t(X)%*%Y
beta2_mco <- b_mco[3]
## var.u_mco
UMU <- t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
var.u_mco <- 1/(n-k)*UMU
sd.u_mco <- sqrt(var.u_mco)
## XX_inv
XX_inv <- solve(t(X)%*%X)
#generamos el intervalo de confianza para beta2
intervalos_beta2 <- rbind(intervalos_beta2,
c(beta2_mco - t_q*sd.u_mco*sqrt(XX_inv[3,3]),
beta2_mco + t_q*sd.u_mco*sqrt(XX_inv[3,3]))
)
#generamos el intervalo de confianza para sigma
intervalos_sigma <- rbind(intervalos_sigma,
c(UMU/q2,
UMU/q1)
)
}
porcentaje_beta2 <- mean(intervalos_beta2[1] < (1.4) & (1.4) < intervalos_beta2[2])
porcentaje_sigma <- mean(intervalos_sigma[1] < (0.04) & (0.04) < intervalos_sigma[2])
porcentaje_beta2
porcentaje_sigma
rm(list = ls())
set.seed(1)
n <- 40
U <- rnorm(n = n, mean = 0, sd = sqrt(0.04))
library(mvtnorm)
mu <- c(0, 0)
Sigma <- matrix(c(0.01, -0.02,
-0.02, 0.09),
nrow = 2,
byrow = T)
X_j <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(X_j) <- c("X_1j", "X_2j")
beta_0 <- 1.1
beta_1 <- -2.4
beta_2 <- 1.4
Y <- beta_0 + beta_1*X_j$X_1j + beta_2*X_j$X_2j + U
k <- 3
alpha <- 0.01
t_q <- qt(p = 1-alpha/2, df = n-k)
X <- cbind(1, X_j)
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Y
X <- as.matrix(X)
var.u_mco <- 1/(n-k)*t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
sd.u_mco <- sqrt(var.u_mco)
c <- c(0, 1, -3)
XX_inv <- solve(t(X)%*%X)
c.XX_inv.c <- t(c)%*%XX_inv%*%c
ci_cb <- c(
t(c)%*%b_mco - t_q*sd.u_mco*sqrt(c.XX_inv.c),
t(c)%*%b_mco + t_q*sd.u_mco*sqrt(c.XX_inv.c)
)
ci_cb
intervalos_cb <- data.frame(t(ci_cb))
set.seed(2)
for (i in 1:999) {
#generamos U
U <- rnorm(n = n, mean = 0, sd = sqrt(0.04))
#generamos X
X_j <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma))
names(X_j) <- c("X_1j", "X_2j")
X <- as.matrix(cbind(1, X_j))
#generamos Y
Y <- beta_0 + beta_1*X_j$X_1j + beta_2*X_j$X_2j + U
#calculamos las piezas del rompecabezas
## b_mco
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Y
## var.u_mco
UMU <- t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%U
var.u_mco <- 1/(n-k)*UMU
sd.u_mco <- sqrt(var.u_mco)
## c'.XX_inv.c
c <- c(0, 1, -3)
XX_inv <- solve(t(X)%*%X)
c.XX_inv.c <- t(c)%*%XX_inv%*%c
#generamos el intervalo de confianza para sigma
intervalos_cb <- rbind(intervalos_cb,
c(t(c)%*%b_mco - t_q*sd.u_mco*sqrt(c.XX_inv.c),
t(c)%*%b_mco + t_q*sd.u_mco*sqrt(c.XX_inv.c))
)
}
porcentaje_cb <- mean(intervalos_cb[1] < (-6.6) & (-6.6) < intervalos_cb[2])
porcentaje_cb
set.seed(1)
rm(list = ls())
n <- 100
mu <- c(0, 0.5)
Sigma <- matrix(c(0.36, 0.000002,
0.000002, 0.000001),
nrow = 2,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y_i", "X_i")
#Calculamos alpha_0
alpha_0 <- mu[1] - (Sigma[1,2]*mu[2])/Sigma[2,2]
#Calculemos beta_0
beta_0 <- Sigma[1,2]/Sigma[2,2]
#Armamos vector b
b <- t(cbind(alpha_0, beta_0))
b
var_u <- Sigma[1,1] - (Sigma[1,2]^2)/Sigma[2,2]
var_u
library(ggplot2)
library(hrbrthemes)
ggplot(Z, aes(x=X_i, y=Y_i)) +
geom_point(color="black",
fill="#69b3a2",
shape=22,
alpha=0.65,
size=2) +
geom_function(fun = function(x) b[1] + b[2]*x) +
theme_ipsum()
X <- cbind(1, Z$X_i)
XX <- t(X)%*%as.matrix(X)
XX
det(XX)
head(X)
tail(X)
solve(XX)
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%as.matrix(Z$Y_i)
b_mco
k <- 1
U <- Z$Y_i - X%*%b
var.u_mco <- 1/(n-k)*t(U)%*%(diag(1, nrow = n) - X%*%solve(t(X)%*%X)%*%t(X))%*%(U)
var.u_mco
var_cond_b <- var_u*solve(XX)
var_cond_alpha <- var_cond_b[1,1]
var_cond_beta <- var_cond_b[2,2]
var_cond_b
var_cond_u <- 2/(n-k)*var_u^2
alpha <- 0.05
t_q <- qt(p = 1-alpha/2, df = n-k)
sd.u_mco <- sqrt(var.u_mco)
XX_inv <- solve(t(X)%*%X)
sqrt(XX_inv[1,1])
ci_alpha <- c(b_mco[1] - t_q*sd.u_mco*sqrt(XX_inv[1,1]),
b_mco[1] + t_q*sd.u_mco*sqrt(XX_inv[1,1]))
ci_alpha
ci_beta <- c(b_mco[2] - t_q*sd.u_mco*sqrt(XX_inv[2,2]),
b_mco[2] + t_q*sd.u_mco*sqrt(XX_inv[2,2]))
ci_beta
estimados <- data.frame(
alphaMCO = b_mco[1],
beta_MCO = b_mco[2],
sigma_u_MCO = var.u_mco
)
for (i in 2:5) {
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y_i", "X_i")
#matriz X_{nxk}
X <- cbind(1, Z$X_i)
#vector U dim n
U <- Z$Y_i - X%*%b
I_n <- diag(1, nrow = n)
#estimadores de MCO
b.mco_4times <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%as.matrix(Z$Y_i)
var.u.mco_4times <- 1/(n-k)*t(U)%*%(I_n - X%*%solve(t(X)%*%X)%*%t(X))%*%(U)
estimados <- rbind(estimados,
c(b.mco_4times,
var.u.mco_4times)
)
}
library(knitr)
kable(estimados,
col.names = c("$\\{\\hat{\\alpha}_i\\}_{i=1}^5$",
"$\\{\\hat{\\beta}_i\\}_{i=1}^5$",
"$\\{\\hat{\\sigma}_{ui}^2\\}_{i=1}^5$")
)
kable(data.frame(t(b), var_u),
col.names = c("$\\alpha_0$",
"$\\beta_0$",
"$\\sigma_u^2$")
)
set.seed(1)
rm(list = ls())
n <- 100
mu <- c(1, 0, 2)
Sigma <- matrix(c(0.8, 0.4, -0.2,
0.4, 1, -0.8,
-0.2, -0.8, 2),
nrow = 3,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y", "X_1", "X_2")
alpha <- 0.01
k <- 3
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
X <- cbind(1, Z[,-1])
b_mco <- solve(t(X)%*%as.matrix(X))%*%t(X)%*%Z$Y
b_1_mco <- b_mco[1]
X <- as.matrix(X)
U_mco <- Z$Y - as.matrix(X)%*%as.matrix(b_mco)
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
sd.u_mco <- sqrt(var.u_mco)
XX_inv <- solve(t(X)%*%X)
alpha <- 0.05
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
b_2_mco <- b_mco[2]
alpha <- 0.1
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
b_3_mco <- b_mco[3]
XX_inv
t(c)%*%XX_inv%*%c
c
c <- matrix(c(1,0,1))
alpha <- 0.1
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
t(c)%*%XX_inv%*%c
t(c)%*%XX_inv%*%c
t_q
(t(c)%*%b_mco - 1)/(sd.u_mco*t(c)%*%XX_inv%*%c
)
(t(c)%*%b_mco - 1)/(sd.u_mco*t(c)%*%XX_inv%*%c)
t(c)
t(c)%*%b_mco
t(c)%*%b_mco-1
(t(c)%*%b_mco-1)/(sd.u_mco*sqrt(t(c)%*%XX_inv%*%c))
t(c)%*%XX_inv%*%c
sqrt(t(c)%*%XX_inv%*%c)
b_mco[1] + b_mco[3]
