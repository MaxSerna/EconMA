t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
t_q
XX_inv <- solve(t(X)%*%X)
b_OLS <- XX_inv%*%t(X)%*%Z[,1]
rownames(b_OLS) <- c("beta_0", "beta_1",
"beta_2", "beta_3")
b_OLS
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
sd.u_OLS
c <- matrix(c(0,0,1,-1))
c
c.XX_inv.c <- t(c)%*%XX_inv%*%c
CI <- c(
t(c)%*%b_OLS - t_q*sd.u_OLS*sqrt(c.XX_inv.c),
t(c)%*%b_OLS + t_q*sd.u_OLS*sqrt(c.XX_inv.c)
)
CI
library(dplyr)
rm(list = ls())
single.person.size <- k401ksubs %>%
filter(fsize==1) %>%
nrow()
single.person.size
# variables
Z <- k401ksubs %>%
filter(fsize==1) %>%
select(nettfa, inc, age)
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
#OLS (use lm for convenience)
model <- summary(lm(nettfa ~ inc + age,
data = as.data.frame(Z)))
b_OLS <- model$coefficients[,1]
b_std.errors <- model$coefficients[,2]
b_t.values <- model$coefficients[,3]
b_p.values <- model$coefficients[,4]
r.sq <- model$r.squared
XX_inv <- solve(t(X)%*%X)
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
t_beta2 <- (b_OLS[3] - 1) / (sd.u_OLS*sqrt(XX_inv[3,3]))
t_beta2
var.b_OLS <- as.numeric(var.u_OLS)*XX_inv
sd.b_OLS <- sqrt(diag(var.b_OLS))
t_woold <- (b_OLS[3] -1 ) / sd.b_OLS[3]
names(t_woold) <- "t_beta"
t_woold
qt(p = 0.01, df = n-k)
qt(p = 0.01, df = n-k)
qt(p = 0.01, df = n-k, lower.tail = F)
qt(p = 0.01, df = n-k)
pt(qt(p = 0.01, df = n-k), df = n-k)
pt(t_beta2, df = n-k)
pt(t_beta2, df = n-k)
t_beta2
?pt
pt(t_beta2, df = n-k)
qt(0.01, df = n-k)
t_1pct <- qt(0.01, df = n-k)
t_1pct
knitr::opts_chunk$set(echo = T)
rm(list = ls())
library(stargazer)
rm(list = ls())
library(wooldridge)
Z <- ceosal1[, c("lsalary", "lsales", "roe", "ros")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
t_q <- qt(p = 0.1, df = n-k, lower.tail = F)
t_q
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
b_mco
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
#Desviación estándar de los errores de MCO
sd.u_mco <- sqrt(var.u_mco)
sd.u_mco
#estadístico de prueba para \beta_3
t_b3 <- b_mco[4]/(sd.u_mco*sqrt(XX_inv[4,4]))
t_b3
#Matriz de varianza de estimadores de MCO
var.b_mco <- as.numeric(var.u_mco)*XX_inv
#errores estandar de los estimadores de MCO
sd.b_mco <- sqrt(diag(var.b_mco))
#estadístico de prueba
b_mco[4]/sd.b_mco[4]
rm(list = ls())
library(wooldridge)
Z <- rental[rental$y90==1, c("lrent", "lpop", "lavginc", "pctstu")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
t_q <- qt(p = 0.01/2, df = n-k, lower.tail = F)
t_q
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
b_mco
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
#Desviación estándar de los errores de MCO
sd.u_mco <- sqrt(var.u_mco)
sd.u_mco
#estadístico de prueba para \beta_3
t_b3 <- b_mco[4]/(sd.u_mco*sqrt(XX_inv[4,4]))
t_b3
#Matriz de varianza de estimadores de MCO
var.b_mco <- as.numeric(var.u_mco)*XX_inv
#errores estandar de los estimadores de MCO
sd.b_mco <- sqrt(diag(var.b_mco))
library(mvtnorm)
set.seed(2)
rm(list = ls())
n <- 100
mu <- c(1, 0, 2)
Sigma <- matrix(c(0.8, 0.4, -0.2,
0.4, 1, -0.8,
-0.2, -0.8, 2),
nrow = 3,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y", "X_1", "X_2")
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
R <- diag(3)
r <- matrix(c(0, 0.5, 1))
m <- nrow(r)
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
F_b.hat <- (t(R%*%b_mco - r)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco - r)) / (m*var.u_mco)
F_b.hat
alpha <- 0.05
F_alpha <- qf(alpha, df1 = m, df2 = n-k, lower.tail = F)
F_alpha
b_mcr <- b_mco - XX_inv%*%t(R)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco-r)
U_mcr <- Z[,1] - X%*%b_mcr
F_b.hat <- (t(U_mcr)%*%U_mcr - t(U_mco)%*%U_mco) / (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat
numerador <- t(b_mcr - b_mco)%*%solve(XX_inv)%*%(b_mcr - b_mco)
denominador <- (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat <- numerador / denominador
F_b.hat
R <- matrix(c(1,0,1,
1,-1,1),
nrow = 2,
byrow = T)
r <- matrix(c(1, 0.5))
#rango de R
fBasics::rk(R)
m <- nrow(r)
F_b.hat <- (t(R%*%b_mco - r)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco - r)) / (m*var.u_mco)
F_b.hat
alpha <- 0.1
F_alpha <- qf(alpha, df1 = m, df2 = n-k, lower.tail = F)
F_alpha
b_mcr <- b_mco - XX_inv%*%t(R)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco-r)
U_mcr <- Z[,1] - X%*%b_mcr
F_b.hat <- (t(U_mcr)%*%U_mcr - t(U_mco)%*%U_mco) / (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat
numerador <- (t(b_mcr - b_mco)%*%solve(XX_inv)%*%(b_mcr - b_mco))/m
denominador <- (t(U_mco)%*%U_mco)/(n-k)
F_b.hat <- numerador / denominador
F_b.hat
#Calculamos b_1
b_1 <- as.numeric(mu[1] - Sigma[1,2:3]%*%solve(Sigma[-1,-1])%*%mu[-1])
#Calculemos b_2 y b_3
b_2 <- (solve(Sigma[-1,-1])%*%Sigma[1,2:3])[1]
b_3 <- (solve(Sigma[-1,-1])%*%Sigma[1,2:3])[2]
#Armamos vector b
b <- t(cbind(b_1, b_2, b_3))
b
var_u <- Sigma[1,1] - Sigma[1,2:3]%*%solve(Sigma[-1,-1])%*%as.matrix(Sigma[1,2:3])
var_u
alpha <- 0.1
q_bhat <- qnorm(p = alpha/2, lower.tail = F)
rm(list = ls())
library(wooldridge)
Z <- wage2[, c("lwage", "educ", "exper", "tenure")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
alpha <- 0.05
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
t_q
XX_inv <- solve(t(X)%*%X)
b_OLS <- XX_inv%*%t(X)%*%Z[,1]
rownames(b_OLS) <- c("beta_0", "beta_1",
"beta_2", "beta_3")
b_OLS
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
sd.u_OLS
c <- matrix(c(0,0,1,-1))
c
c.XX_inv.c <- t(c)%*%XX_inv%*%c
CI <- c(
t(c)%*%b_OLS - t_q*sd.u_OLS*sqrt(c.XX_inv.c),
t(c)%*%b_OLS + t_q*sd.u_OLS*sqrt(c.XX_inv.c)
)
CI
library(dplyr)
rm(list = ls())
single.person.size <- k401ksubs %>%
filter(fsize==1) %>%
nrow()
single.person.size
# variables
Z <- k401ksubs %>%
filter(fsize==1) %>%
select(nettfa, inc, age)
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
#OLS (use lm for convenience)
model <- summary(lm(nettfa ~ inc + age,
data = as.data.frame(Z)))
b_OLS <- model$coefficients[,1]
b_std.errors <- model$coefficients[,2]
b_t.values <- model$coefficients[,3]
b_p.values <- model$coefficients[,4]
r.sq <- model$r.squared
XX_inv <- solve(t(X)%*%X)
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
t_beta2 <- (b_OLS[3] - 1) / (sd.u_OLS*sqrt(XX_inv[3,3]))
t_beta2
var.b_OLS <- as.numeric(var.u_OLS)*XX_inv
sd.b_OLS <- sqrt(diag(var.b_OLS))
t_woold <- (b_OLS[3] -1 ) / sd.b_OLS[3]
names(t_woold) <- "t_beta"
t_woold
pval <- pt(t_beta2, df = n-k)
pval
t_1pct <- qt(0.01, df = n-k)
t_1pct
Z
Z
new_model <- summary(lm(nettfa ~ inc, data = as.data.frame(Z)))
b_OLS_new <- new_model$coefficients[,1]
b_std.errors_new <- model$coefficients[,2]
new_model
model
b_OLS_new
knitr::opts_chunk$set(echo = T)
rm(list = ls())
library(stargazer)
rm(list = ls())
library(wooldridge)
Z <- ceosal1[, c("lsalary", "lsales", "roe", "ros")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
t_q <- qt(p = 0.1, df = n-k, lower.tail = F)
t_q
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
b_mco
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
#Desviación estándar de los errores de MCO
sd.u_mco <- sqrt(var.u_mco)
sd.u_mco
#estadístico de prueba para \beta_3
t_b3 <- b_mco[4]/(sd.u_mco*sqrt(XX_inv[4,4]))
t_b3
#Matriz de varianza de estimadores de MCO
var.b_mco <- as.numeric(var.u_mco)*XX_inv
#errores estandar de los estimadores de MCO
sd.b_mco <- sqrt(diag(var.b_mco))
#estadístico de prueba
b_mco[4]/sd.b_mco[4]
rm(list = ls())
library(wooldridge)
Z <- rental[rental$y90==1, c("lrent", "lpop", "lavginc", "pctstu")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
t_q <- qt(p = 0.01/2, df = n-k, lower.tail = F)
t_q
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
b_mco
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
#Desviación estándar de los errores de MCO
sd.u_mco <- sqrt(var.u_mco)
sd.u_mco
#estadístico de prueba para \beta_3
t_b3 <- b_mco[4]/(sd.u_mco*sqrt(XX_inv[4,4]))
t_b3
#Matriz de varianza de estimadores de MCO
var.b_mco <- as.numeric(var.u_mco)*XX_inv
#errores estandar de los estimadores de MCO
sd.b_mco <- sqrt(diag(var.b_mco))
library(mvtnorm)
set.seed(2)
rm(list = ls())
n <- 100
mu <- c(1, 0, 2)
Sigma <- matrix(c(0.8, 0.4, -0.2,
0.4, 1, -0.8,
-0.2, -0.8, 2),
nrow = 3,
byrow = T)
Z <- data.frame(
rmvnorm(
n,
mean = mu,
sigma = Sigma)
)
names(Z) <- c("Y", "X_1", "X_2")
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
R <- diag(3)
r <- matrix(c(0, 0.5, 1))
m <- nrow(r)
#Matriz (X'X)^{-1}
XX_inv <- solve(t(X)%*%X)
#Estimadores de MCO
b_mco <- XX_inv%*%t(X)%*%Z[,1]
#Errores de MCO
U_mco <- Z[,1] - X%*%b_mco
#Varianza de los errores de MCO
var.u_mco <- 1/(n-k)*t(U_mco)%*%U_mco
F_b.hat <- (t(R%*%b_mco - r)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco - r)) / (m*var.u_mco)
F_b.hat
alpha <- 0.05
F_alpha <- qf(alpha, df1 = m, df2 = n-k, lower.tail = F)
F_alpha
b_mcr <- b_mco - XX_inv%*%t(R)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco-r)
U_mcr <- Z[,1] - X%*%b_mcr
F_b.hat <- (t(U_mcr)%*%U_mcr - t(U_mco)%*%U_mco) / (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat
numerador <- t(b_mcr - b_mco)%*%solve(XX_inv)%*%(b_mcr - b_mco)
denominador <- (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat <- numerador / denominador
F_b.hat
R <- matrix(c(1,0,1,
1,-1,1),
nrow = 2,
byrow = T)
r <- matrix(c(1, 0.5))
#rango de R
fBasics::rk(R)
m <- nrow(r)
F_b.hat <- (t(R%*%b_mco - r)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco - r)) / (m*var.u_mco)
F_b.hat
alpha <- 0.1
F_alpha <- qf(alpha, df1 = m, df2 = n-k, lower.tail = F)
F_alpha
b_mcr <- b_mco - XX_inv%*%t(R)%*%solve(R%*%XX_inv%*%t(R))%*%(R%*%b_mco-r)
U_mcr <- Z[,1] - X%*%b_mcr
F_b.hat <- (t(U_mcr)%*%U_mcr - t(U_mco)%*%U_mco) / (m*1/(n-k)*t(U_mco)%*%U_mco)
F_b.hat
numerador <- (t(b_mcr - b_mco)%*%solve(XX_inv)%*%(b_mcr - b_mco))/m
denominador <- (t(U_mco)%*%U_mco)/(n-k)
F_b.hat <- numerador / denominador
F_b.hat
#Calculamos b_1
b_1 <- as.numeric(mu[1] - Sigma[1,2:3]%*%solve(Sigma[-1,-1])%*%mu[-1])
#Calculemos b_2 y b_3
b_2 <- (solve(Sigma[-1,-1])%*%Sigma[1,2:3])[1]
b_3 <- (solve(Sigma[-1,-1])%*%Sigma[1,2:3])[2]
#Armamos vector b
b <- t(cbind(b_1, b_2, b_3))
b
var_u <- Sigma[1,1] - Sigma[1,2:3]%*%solve(Sigma[-1,-1])%*%as.matrix(Sigma[1,2:3])
var_u
alpha <- 0.1
q_bhat <- qnorm(p = alpha/2, lower.tail = F)
rm(list = ls())
library(wooldridge)
Z <- wage2[, c("lwage", "educ", "exper", "tenure")]
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
alpha <- 0.05
t_q <- qt(p = alpha/2, df = n-k, lower.tail = F)
t_q
XX_inv <- solve(t(X)%*%X)
b_OLS <- XX_inv%*%t(X)%*%Z[,1]
rownames(b_OLS) <- c("beta_0", "beta_1",
"beta_2", "beta_3")
b_OLS
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
sd.u_OLS
c <- matrix(c(0,0,1,-1))
c
c.XX_inv.c <- t(c)%*%XX_inv%*%c
CI <- c(
t(c)%*%b_OLS - t_q*sd.u_OLS*sqrt(c.XX_inv.c),
t(c)%*%b_OLS + t_q*sd.u_OLS*sqrt(c.XX_inv.c)
)
CI
library(dplyr)
rm(list = ls())
single.person.size <- k401ksubs %>%
filter(fsize==1) %>%
nrow()
single.person.size
# variables
Z <- k401ksubs %>%
filter(fsize==1) %>%
select(nettfa, inc, age)
Z <- as.matrix(Z)
X <- cbind(1, Z[,-1])
n <- nrow(Z)
k <- ncol(Z)
#OLS (use lm for convenience)
model <- summary(lm(nettfa ~ inc + age,
data = as.data.frame(Z)))
b_OLS <- model$coefficients[,1]
b_std.errors <- model$coefficients[,2]
b_t.values <- model$coefficients[,3]
b_p.values <- model$coefficients[,4]
r.sq <- model$r.squared
XX_inv <- solve(t(X)%*%X)
U_OLS <- Z[,1] - X%*%b_OLS
var.u_OLS <- 1/(n-k)*t(U_OLS)%*%U_OLS
sd.u_OLS <- sqrt(var.u_OLS)
t_beta2 <- (b_OLS[3] - 1) / (sd.u_OLS*sqrt(XX_inv[3,3]))
t_beta2
var.b_OLS <- as.numeric(var.u_OLS)*XX_inv
sd.b_OLS <- sqrt(diag(var.b_OLS))
t_woold <- (b_OLS[3] -1 ) / sd.b_OLS[3]
names(t_woold) <- "t_beta"
t_woold
pval <- pt(t_beta2, df = n-k)
pval
t_1pct <- qt(0.01, df = n-k)
t_1pct
new_model <- summary(lm(nettfa ~ inc, data = as.data.frame(Z)))
b_OLS_new <- new_model$coefficients[,1]
b_std.errors_new <- new_model$coefficients[,2]
r.sq_new <- new_model$r.squared
model
model
new_model
b_OLS
b_OLS_new
cor(Z)
summary(lm(age ~ inc, data = as.data.frame(Z)))
lm(age ~ inc, data = as.data.frame(Z))
lm(age ~ inc, data = as.data.frame(Z))$coefficients
lm(age ~ inc, data = as.data.frame(Z))$coefficients[2]
b_OLS
b_OLS[2] + b_OLS[3]
b_OLS[2] + b_OLS[3]*lm(age ~ inc, data = as.data.frame(Z))$coefficients[2]
b_OLS_new[2]
cor(Z)
b_OLS[2] + b_OLS[3]*lm(age ~ inc, data = as.data.frame(Z))$coefficients[2]
test_model <- lm(age ~ inc, data = as.data.frame(Z))
delta_1 <- test_model$coefficients[2]
b_OLS[2] + b_OLS[3]*delta_1
b_OLS_new
b_OLS_new[2]
test_model <- lm(age ~ inc, data = as.data.frame(Z))
delta_1 <- test_model$coefficients[2]
delta_1
test_model <- lm(age ~ inc, data = as.data.frame(Z))
delta_1 <- test_model$coefficients[2]
as.numeric(delta_1)
b_OLS_new[2]
b_OLS[2] + b_OLS[3]*delta_1
